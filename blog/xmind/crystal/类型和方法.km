{"root":{"data":{"id":"320bbb3118a7","created":1535814472,"text":"类型和方法","expandState":"expand"},"children":[{"data":{"id":"bo28sxl1c2g0","created":1535814500921,"text":"一切都是一个对象","expandState":"collapse"},"children":[{"data":{"id":"bo28t207o9k0","created":1535814510546,"text":"有一种类型"},"children":[]},{"data":{"id":"bo28t65m2fc0","created":1535814519579,"text":"可以响应一些方法"},"children":[]}]},{"data":{"id":"bo28wd9af7c0","created":1535814770132,"text":"  类和方法","expandState":"collapse"},"children":[{"data":{"id":"bo28x1l70ls0","created":1535814823094,"text":"initialize"},"children":[]},{"data":{"id":"bo28xhgv43s0","created":1535814857661,"text":"john = Person.new \"John\""},"children":[]},{"data":{"id":"bo2900dlj3c0","created":1535815055551,"text":"self.new"},"children":[]}]},{"data":{"id":"bo290fo53200","created":1535815088840,"text":"方法和实例变量","expandState":"collapse"},"children":[{"data":{"id":"bo291azp3940","created":1535815157019,"text":"简化构造函数","expandState":"collapse"},"children":[{"data":{"id":"bo291vhb4400","created":1535815201619,"text":"def initialize(@name : String)\n@age = 0\nend"},"children":[]}]},{"data":{"id":"bo293kx08mo0","created":1535815335352,"text":"方法名称以小写字母开头"},"children":[]},{"data":{"id":"bo2944ezrg00","created":1535815377799,"text":"getter/setter宏","expandState":"collapse"},"children":[{"data":{"id":"bo294g5jwnk0","created":1535815403349,"text":"class Person\nproperty age\ngetter name : String"},"children":[]}]},{"data":{"id":"bo29c5n95uo0","created":1535816007388,"text":"重新定义方法","expandState":"collapse"},"children":[{"data":{"id":"bo29c5uvhq80","created":1535816007849,"text":"如果重新定义方法，则最后一个定义优先"},"children":[]},{"data":{"id":"bo29c78y4ls0","created":1535816010877,"text":"previous_def"},"children":[{"data":{"id":"bo29d5wj9cw0","created":1535816086314,"text":"class Persondef \nbecome_older\nprevious_def\n@age += 2  ","expandState":"collapse"},"children":[{"data":{"id":"bo29dnhgmvk0","created":1535816124584,"text":"3"},"children":[]}]}]},{"data":{"id":"bo29e4xm7b40","created":1535816162567,"text":"initialize方法\n之外初始化"},"children":[{"data":{"id":"bo29e54lwjc0","created":1535816162989,"text":"class Person\n@age = 0"},"children":[]}]}]},{"data":{"id":"bo29ep2n5p40","created":1535816206406,"text":"类型推断","expandState":"collapse"},"children":[{"data":{"id":"bo29ew9j1bc0","created":1535816222060,"text":"使用类型注释"},"children":[{"data":{"id":"bo29f062siw0","created":1535816230558,"text":"class Person\n@name : String\n@age : Int32"},"children":[]}]},{"data":{"id":"bo29gkn6jlk0","created":1535816353492,"text":"类方法中分配，类型需要推断"},"children":[]},{"data":{"id":"bo29mtyxjfk0","created":1535816843979,"text":"返回类型注释"},"children":[{"data":{"id":"bo29mzpcssw0","created":1535816856461,"text":"class Addressdef \nself.unknown : Address\nnew(\"unknown\")\nend","expandState":"collapse"},"children":[{"data":{"id":"bo29ne4szyw0","created":1535816887870,"text":"简化"},"children":[]},{"data":{"id":"bo29nl8ednk0","created":1535816903325,"text":"class Address\nheredef self.unknown\nnew(\"unknown\")\nend"},"children":[]}]}]},{"data":{"id":"bo29odfgwv40","created":1535816964702,"text":"默认值","expandState":"collapse"},"children":[{"data":{"id":"bo29oi19smg0","created":1535816974727,"text":"def initialize(name = \"John Doe\")"},"children":[]},{"data":{"id":"bo29oqj9p800","created":1535816993230,"text":"def initialize(@name = \"John Doe\")"},"children":[]}]},{"data":{"id":"bo29pw4goxc0","created":1535817083759,"text":"调用lib函数"},"children":[{"data":{"id":"bo29q2fc3u00","created":1535817097478,"text":"@age = LibPerson.compute_default_age"},"children":[]},{"data":{"id":"bo29qa1cqvk0","created":1535817114046,"text":"lib LibPersonfun \ncompute_default_age : Int32\nend"},"children":[]}]},{"data":{"id":"bo29ro7te680","created":1535817223276,"text":"outlib表达式"},"children":[{"data":{"id":"bo29s3ufi5s0","created":1535817257295,"text":"编译器可以使用out参数的类型，\n它应该是指针类型，并使用解引用类型作为猜测"},"children":[]},{"data":{"id":"bo29sjjm5480","created":1535817291470,"text":"LibPerson.compute_default_age(out @age)"},"children":[{"data":{"id":"bo29swwsre00","created":1535817320565,"text":"推断为 Int32"},"children":[]}]},{"data":{"id":"bo29sq08oxc0","created":1535817305536,"text":"lib LibPersonfun compute_default_age(age_ptr : Int32*)\nend"},"children":[]}]},{"data":{"id":"bo29t6ouuaw0","created":1535817341853,"text":"其他规则"},"children":[{"data":{"id":"bo29u54flls0","created":1535817416805,"text":"@age = some_condition ? 1 : 2"},"children":[{"data":{"id":"bo29uaytg5k0","created":1535817429527,"text":"成功推断出Int32不需要冗余类型注释"},"children":[]}]},{"data":{"id":"bo29vmmog1k0","created":1535817533278,"text":"@lucky_number ||= 42"},"children":[{"data":{"id":"bo29vmu6rig0","created":1535817533732,"text":"Int32 | Nil"},"children":[]}]},{"data":{"id":"bo29w1tuh1k0","created":1535817566363,"text":"class SomeObject\nDEFAULT_LUCKY_NUMBER = 42\ndef initialize(@lucky_number = DEFAULT_LUCKY_NUMBER)"},"children":[{"data":{"id":"bo29wlg7kiw0","created":1535817609074,"text":"Int32"},"children":[]}]}]}]},{"data":{"id":"bo29xrnz5000","created":1535817700969,"text":"Union类型","expandState":"collapse"},"children":[{"data":{"id":"bo29zbgz9mg0","created":1535817822445,"text":"if true  a=1 else a=\"hello\""},"children":[{"data":{"id":"bo29zydmm6g0","created":1535817872309,"text":"a.class   #Int32"},"children":[]},{"data":{"id":"bo2a0tlxc880","created":1535817940291,"text":"typeof(a)  #Int32"},"children":[]},{"data":{"id":"bo2a0m1x0tc0","created":1535817923844,"text":"联合类型由编译器自动创建。\n在运行时，a只有一种类型"},"children":[]}]},{"data":{"id":"bo2a1sh8mk00","created":1535818016195,"text":"联合中的所有类型都必须响应该方法，\n否则会给出编译时错误"},"children":[{"data":{"id":"bo2a219z4h40","created":1535818035347,"text":"a.to_s # => String\na + 1 # Error, because String#+(Int32) isn't defined"},"children":[]}]},{"data":{"id":"bo2a2iif6lc0","created":1535818072863,"text":"可以在编译时将变量定义为联合类型"},"children":[{"data":{"id":"bo2a2o8o4bc0","created":1535818085334,"text":"a = 0.as(Int32|Nil|String)\ntypeof(a) # => Int32 | Nil | String"},"children":[]}]},{"data":{"id":"bo2a5sbaqsg0","created":1535818329292,"text":"类和结构的Union","expandState":"collapse"},"children":[{"data":{"id":"bo2a5yfane00","created":1535818342595,"text":"class Foo\nclass Bar < Foo\nclass Baz < Foo\nbar = Bar.new\nbaz=Baz.new\nfoo = rand<0.5 ? bar : baz\ntypeof(foo) # Foo+"},"children":[]}]},{"data":{"id":"bo2a8pj744o0","created":1535818558332,"text":"具有相同键的命名元组的联合"},"children":[{"data":{"id":"bo2a8u8fd2o0","created":1535818568565,"text":"t1 = {x: 1, y: \"hi\"}   # Tuple(x: Int32, y: String)\nt2 = {y: true, x: nil} # Tuple(y: Bool, x: Nil)\nt3 = rand < 0.5 ? t1 : t2\ntypeof(t3) # NamedTuple(x: Int32 | Nil, y: String | Bool)"},"children":[]}]}]}]},{"data":{"id":"bo2aavyhpbc0","created":1535818729046,"text":"Overload方法","expandState":"collapse"},"children":[{"data":{"id":"bo2ab6ol52o0","created":1535818752392,"text":"方法名称相同，不同参数类型或数量"},"children":[]},{"data":{"id":"bo2lhakhmzc0","created":1535850263245,"text":"class Person\n@age = 0\ndef become_older(age)\ndef become_older(age : String)"},"children":[]}]},{"data":{"id":"bo2lirf87a80","created":1535850378296,"text":"默认值","expandState":"collapse"},"children":[{"data":{"id":"bo2lj92lfc00","created":1535850416714,"text":"class Persondef \nbecome_older(by = 1)"},"children":[]}]},{"data":{"id":"bo2liyld5io0","created":1535850393905,"text":"命名参数","expandState":"collapse"},"children":[{"data":{"id":"bo2lj7f7a3c0","created":1535850413123,"text":"john.become_older by: 5"},"children":[]},{"data":{"id":"bo2ljvof2680","created":1535850465923,"text":"def some_method(x, y = 1, z = 2, w = 3)\nsome_method 10                   # x: 10, y: 1, z: 2, w: 3\nsome_method 10, z: 10            # x: 10, y: 1, z: 10, w: 3\nsome_method 10, w: 1, y: 2, z: 3 # x: 10, y: 2, z: 3, w: 1\nsome_method y: 10, x: 20         # x: 20, y: 10, z: 2, w: 3\nsome_method y: 10                # Error, missing argument: x"},"children":[]}]},{"data":{"id":"bo2lkss0k1s0","created":1535850537975,"text":"Splats和元组","expandState":"collapse"},"children":[{"data":{"id":"bo2lluamne80","created":1535850619641,"text":"splat（*）接收可变数量的参数","expandState":"expand"},"children":[{"data":{"id":"bo2lmm5xb3s0","created":1535850680306,"text":"def sum(*elements)\nsum 1, 2, 3    #=> 6\nsum 1, 2, 3, 4.5 #=> 10.5"},"children":[]}]},{"data":{"id":"bo2lmbmq6zk0","created":1535850657378,"text":"splat（）只能出现一次并且位于任何位置"},"children":[{"data":{"id":"bo2lnckxmk00","created":1535850737810,"text":"def sum(*elements, initial = 0)\nsum 1, 2, 3 # => 6\nsum 1, 2, 3, initial: 10 # => 16"},"children":[]}]},{"data":{"id":"bo2lolid4jk0","created":1535850835610,"text":"具有不同所需命名参数的方法相互重载","expandState":"collapse"},"children":[{"data":{"id":"bo2lor328y80","created":1535850847746,"text":"def foo(*elements, x)\ndef foo(*elements, y)\nfoo x: \"something\" # => 1\nfoo y: \"something\" # => 2"},"children":[]}]},{"data":{"id":"bo2lq3hgv7k0","created":1535850953102,"text":"splat参数也可以保持未命名\n其含义为“在此之后，命名参数如下","expandState":"collapse"},"children":[{"data":{"id":"bo2lqc7jni00","created":1535850972093,"text":"def foo(x, y, *, z)\nfoo 1, 2, 3    # Error, wrong number of arguments (given 3, expected 2)\nfoo 1, 2       # Error, missing argument: z\nfoo 1, 2, z: 3 # OK"},"children":[]}]},{"data":{"id":"bo2lr14o4n40","created":1535851026339,"text":"Splatting一个元组"},"children":[{"data":{"id":"bo2ls2pnib40","created":1535851108149,"text":"元组可以通过使用*以下方式进入方法调用"},"children":[{"data":{"id":"bo2lsg3oc080","created":1535851137295,"text":"def foo(x, y)\ntuple = {1, 2}\nfoo *tuple # => 3"},"children":[]}]}]},{"data":{"id":"bo2luda6lps0","created":1535851287886,"text":"双splats和命名元组","expandState":"collapse"},"children":[{"data":{"id":"bo2lutzbefc0","created":1535851324234,"text":"双splat（**）捕获未与其他参数匹配的命名参数，参数的类型是NamedTuple"},"children":[]},{"data":{"id":"bo2lvr6wfqo0","created":1535851396527,"text":"def foo(x, **other)\nfoo 1, y: 2, z: 3    # => {y: 2, z: 3}\nfoo y: 2, x: 1, z: 3 # => {y: 2, z: 3}"},"children":[]}]},{"data":{"id":"bo2mqsqn78w0","created":1535853829187,"text":"双重splatting命名元组","expandState":"collapse"},"children":[{"data":{"id":"bo2mqypgm1s0","created":1535853842176,"text":"NamedTuple可以通过使用**以下方式进入方法调用","expandState":"collapse"},"children":[{"data":{"id":"bo2mr80bue00","created":1535853862424,"text":"def foo(x, y)\nx - y\nend\ntuple = {y: 3, x: 10}\nfoo **tuple # => 7"},"children":[]}]}]}]},{"data":{"id":"bo2mrv7zhmg0","created":1535853912953,"text":"类型限制","expandState":"collapse"},"children":[{"data":{"id":"bo2nero9nrk0","created":1535855707606,"text":"方法参数中类型注释","expandState":"collapse"},"children":[{"data":{"id":"bo2mta47t0o0","created":1535854023741,"text":"def add(x : Number, y : Number)","expandState":"expand"},"children":[{"data":{"id":"bo2mzzknucg0","created":1535854549340,"text":"class Six\ndef +(other)\n6 + other\nend\nend\ndef add(x, y)\nx + y\nend\nadd Six.new, 10\ndef restricted_add(x : Number, y : Number)\nx + y\nend\n# Error: no overload matches 'restricted_add' with types Six, Int32\nrestricted_add Six.new, 10"},"children":[]}]},{"data":{"id":"bo2n2v3vimo0","created":1535854774710,"text":"类型限制不适用于实际方法中的变量","expandState":"expand"},"children":[{"data":{"id":"bo2n2i20hvk0","created":1535854746299,"text":"def handle_path(path : String)\npath = Path.new(path) # *path* is now of the type Path\n# Do something with *path*\nend"},"children":[]}]}]},{"data":{"id":"bo2n32p28g00","created":1535854791229,"text":"自我限制","expandState":"collapse"},"children":[{"data":{"id":"bo2n6vo26ag0","created":1535855089387,"text":"class Person\ndef ==(other : self)\nother.name == name\n\ndef ==(other)\nfalse","expandState":"expand"},"children":[{"data":{"id":"bo2nd60zzts0","created":1535855582122,"text":"john == another_john #=> true\njohn == peter #=> false (names differ)\njohn == 1 #=> false (because 1 is not a Person)"},"children":[]}]},{"data":{"id":"bo2nhsr1y8w0","created":1535855945044,"text":"class Persondef \nself.compare(p1 : self, p2 : self)\np1.name == p2.name\nend"},"children":[{"data":{"id":"bo2ni6ts0wg0","created":1535855975683,"text":"john = Person.new \"John\"\npeter = Person.new \"Peter\"\n\nPerson.compare(john, peter) # OK"},"children":[]}]}]},{"data":{"id":"bo2nifwxygo0","created":1535855995466,"text":"作为限制的类","expandState":"collapse"},"children":[{"data":{"id":"bo2njiisdco0","created":1535856079504,"text":"Int32使用类型限制使该方法仅接受以下实例 Int32","expandState":"collapse"},"children":[{"data":{"id":"bo2njs3xxzk0","created":1535856100375,"text":"def foo(x : Int32)\nend\nfoo 1"},"children":[]}]},{"data":{"id":"bo2nkmnwyhc0","created":1535856166886,"text":"如果希望方法只接受Int32类型\n（不是它的实例），则使用.class","expandState":"collapse"},"children":[{"data":{"id":"bo2nkvdgn1c0","created":1535856185845,"text":"def foo(x : Int32.class)\nputs \"Got Int32\"\nend\n\ndef foo(x : String.class)\nputs \"Got String\"\nend\n\nfoo Int32  # OK\nfoo String # Error"},"children":[{"data":{"id":"bo2nmmf87mo0","created":1535856323089,"text":"foo Int32  # prints \"Got Int32\"\nfoo String # prints \"Got String\""},"children":[]}]}]}]},{"data":{"id":"bo2nmuz84m80","created":1535856341712,"text":"在splats中指定类型限制","expandState":"collapse"},"children":[{"data":{"id":"bo2nrlqnro00","created":1535856713424,"text":"指定类型限制","expandState":"expand"},"children":[{"data":{"id":"bo2nnxqxo080","created":1535856426105,"text":"def foo(*args : Int32)\nend\ndef foo(*args : String)\nend\ndef foo\nend\n\nfoo 1, 2, 3       # OK, invokes first overload\nfoo \"a\", \"b\", \"c\" # OK, invokes second overload\nfoo 1, 2, \"hello\" # Error\nfoo()             # Error"},"children":[]}]},{"data":{"id":"bo2nqrn8k680","created":1535856647914,"text":"匹配任何类型的一个或多个元素"},"children":[{"data":{"id":"bo2nr6sh76o0","created":1535856680882,"text":"def foo(*args : Object)\nend\n\nfoo() # Error\nfoo(1) # OK\nfoo(1, \"x\") # OK"},"children":[]}]}]}]},{"data":{"id":"bo2ns331vzs0","created":1535856751179,"text":"自由变量","expandState":"collapse"},"children":[{"data":{"id":"bo2nt5pdyww0","created":1535856835247,"text":"参数类型或参数类型的一部分 forall","expandState":"collapse"},"children":[{"data":{"id":"bo2ntcknuwo0","created":1535856850199,"text":"def foo(x : T) forall T\nT\nend\n\nfoo(1)       #=> Int32\nfoo(\"hello\") #=> String"},"children":[]},{"data":{"id":"bo2nudhqnvs0","created":1535856930563,"text":"def foo(x : Array(T)) forall T\nT\nend\n\nfoo([1, 2])   #=> Int32\nfoo([1, \"a\"]) #=> (Int32 | String)"},"children":[]}]},{"data":{"id":"bo2nws86ww80","created":1535857119366,"text":"接受类型名称而不是类型实例的方法","expandState":"collapse"},"children":[{"data":{"id":"bo2nx163kzk0","created":1535857138830,"text":"def foo(x : T.class) forall T\nArray(T)\nend\n\nfoo(Int32)  #=> Array(Int32)\nfoo(String) #=> Array(String)"},"children":[]}]},{"data":{"id":"bo2nxt7hgig0","created":1535857199864,"text":"定多个自由变量，\n以匹配多个参数的类型","expandState":"expand"},"children":[{"data":{"id":"bo2ny3wjv5s0","created":1535857223147,"text":"def push(element : T, array : Array(T)) forall T\narray << element\nend\n\npush(4, [1, 2, 3]) # OK\npush(\"oops\", [1, 2, 3]) # Error"},"children":[]}]}]},{"data":{"id":"bo2nym5txfc0","created":1535857262891,"text":"返回类型","expandState":"collapse"},"children":[{"data":{"id":"bo2nywdjtbc0","created":1535857285125,"text":"方法的返回类型始终由编译器推断。\n您可能希望指定它有两个原因","expandState":"collapse"},"children":[{"data":{"id":"bo2nz4qipaw0","created":1535857303324,"text":"确保该方法返回所需的类型"},"children":[]},{"data":{"id":"bo2nz948yxs0","created":1535857312861,"text":"使其出现在文档注释中"},"children":[]},{"data":{"id":"bo2nzfew3p40","created":1535857326565,"text":"def some_method : String\n\"hello\"\nend"},"children":[]}]},{"data":{"id":"bo2nzxwyg400","created":1535857366839,"text":"返回Nil类型","expandState":"collapse"},"children":[{"data":{"id":"bo2o0fduxmg0","created":1535857404867,"text":"将方法标记为返回 Nil将使其返回"},"children":[{"data":{"id":"bo2o0r1wzo80","created":1535857430266,"text":"def some_method : Nil\n1 + 2\nend\nsome_method # => nil"},"children":[]}]},{"data":{"id":"bo2o1b4h1ow0","created":1535857473956,"text":"存在原因"},"children":[{"data":{"id":"bo2o1j8by3s0","created":1535857491604,"text":"确保方法返回 nil而无需nil在结尾或每个返回点添加额外内容"},"children":[]},{"data":{"id":"bo2o1se0i200","created":1535857511539,"text":"记录方法的返回值没有意义"},"children":[]},{"data":{"id":"bo2o2yw39ns0","created":1535857604056,"text":"与使用Void是相同的，但Nil更惯用"},"children":[]}]}]},{"data":{"id":"bo2o3db8c4o0","created":1535857635447,"text":"NoReturn返回类型","expandState":"collapse"},"children":[{"data":{"id":"bo2o3ui85o00","created":1535857672875,"text":"某些表达式不会返回当前范围，因此没有返回类型。\n这表示为特殊返回类型NoReturn"},"children":[]},{"data":{"id":"bo2o4yi5w2g0","created":1535857759943,"text":"非返回方法和关键字典型的例子是\nreturn，exit，raise，next，和break"},"children":[{"data":{"id":"bo2o5workf40","created":1535857834352,"text":"string = STDIN.gets\ntypeof(string)                        # => String?\ntypeof(raise \"Empty input\")           # => NoReturn\ntypeof(string || raise \"Empty input\") # => String"},"children":[]}]},{"data":{"id":"bo2o5oli6d40","created":1535857816741,"text":"这对解构联合类型很有用"},"children":[]}]}]},{"data":{"id":"bo2o6pq5jq80","created":1535857897563,"text":"方法参数","expandState":"expand"},"children":[{"data":{"id":"bo2oc4sovrk0","created":1535858322189,"text":"方法定义的组件","expandState":"collapse"},"children":[{"data":{"id":"bo2ochdsdw80","created":1535858349586,"text":"必需和可选的位置参数"},"children":[]},{"data":{"id":"bo2oclm6v0o0","created":1535858358801,"text":"一个可选的splat参数，其名称可以为空"},"children":[]},{"data":{"id":"bo2ocp3bvg80","created":1535858366368,"text":"必需和可选的命名参数"},"children":[]},{"data":{"id":"bo2ocspjzvc0","created":1535858374242,"text":"一个可选的双splat参数"},"children":[]}]},{"data":{"id":"bo2ofsvwsig0","created":1535858609719,"text":"示例","expandState":"collapse"},"children":[{"data":{"id":"bo2oeh26pa80","created":1535858505613,"text":"def foo(\n# These are positional arguments:\nx, y, z = 1,\n# This is the splat argument:\n*args,\n# These are the named arguments:\na, b, c = 2,\n# This is the double splat argument:\n**options\n)\nend"},"children":[]}]},{"data":{"id":"bo2ogf29htc0","created":1535858657992,"text":"方法调用的组件","expandState":"collapse"},"children":[{"data":{"id":"bo2oh6tvh000","created":1535858718435,"text":"示例"},"children":[{"data":{"id":"bo2ohl9zb340","created":1535858749885,"text":"foo(\n# These are positional arguments\n1, 2,\n# These are named arguments\na: 1, b: 2\n)"},"children":[]}]},{"data":{"id":"bo2ojefikfk0","created":1535858891709,"text":"call参数可以有splat（*）或double splat（**）"},"children":[]},{"data":{"id":"bo2ojuft3aw0","created":1535858926556,"text":"splat将Tuple扩展为位置参数，而double splat将NamedTuple扩展为命名参数"},"children":[]},{"data":{"id":"bo2ok7paobc0","created":1535858955427,"text":"允许多个参数splats和double splats"},"children":[]}]},{"data":{"id":"bo2okdq9ah40","created":1535858968546,"text":"调用参数与方法参数如何匹配","expandState":"collapse"},"children":[{"data":{"id":"bo2tu8oy7vk0","created":1535873846774,"text":"def foo(x, *, y)\nfoo 1, y: 10 # OK"},"children":[]},{"data":{"id":"bo2tulmsvj40","created":1535873874943,"text":"def foo(x, *args, y)\nfoo 1, y: 10 # OK\nfoo 1, 2, 3, y: 4 # OK"},"children":[]},{"data":{"id":"bo2tvgjd9x40","created":1535873942215,"text":"def foo(*, x, y)\nfoo x: 1, y: 2 # OK"},"children":[]}]},{"data":{"id":"bo2txacmpqw0","created":1535874085476,"text":"外部名称"},"children":[]}]}]},"template":"right","theme":"classic","version":"1.4.43"}