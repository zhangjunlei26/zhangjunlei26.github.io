{"root":{"data":{"id":"649fccf36e73","created":1534643161,"text":"函数方法及面向对象","expandState":"expand"},"children":[{"data":{"id":"bnqpoacecr40","created":1534643376264,"text":"函数","expandState":"collapse"},"children":[{"data":{"id":"bnqpoacigfs0","created":1534643376271,"text":"fn sum(x:i32, y: i32) -> i32  { x+1 }"},"children":[]},{"data":{"id":"bnqpoacj3zs0","created":1534643376272,"text":"必须为参数声明类型"},"children":[]},{"data":{"id":"bnqpoacjkcg0","created":1534643376273,"text":"返回语句不能带分号","expandState":"collapse"},"children":[{"data":{"id":"bnqpoacjcbs0","created":1534643376273,"text":"x+1;"},"children":[]}]},{"data":{"id":"bnqpoacjmpc0","created":1534643376273,"text":"表达式vs语句","expandState":"expand"},"children":[{"data":{"id":"bnqpoacjj4o0","created":1534643376273,"text":"let语句： 引入一个绑定并不是表达式"},"children":[]},{"data":{"id":"bnqpoack32g0","created":1534643376274,"text":"表达式语句：用分号分隔多个表达式，分号几乎出现在每一行"},"children":[]},{"data":{"id":"bnqpoack40g0","created":1534643376274,"text":"返回语句：不带分号，如果带则返回()"},"children":[]}]},{"data":{"id":"bnqpoack91c0","created":1534643376274,"text":"发散函数(无返回值)","expandState":"collapse"},"children":[{"data":{"id":"bnqpoack1140","created":1534643376274,"text":"fn diverges() -> ! {\\n\tpanic!(\"This function never returns!\");\\n}"},"children":[]},{"data":{"id":"bnqpoack5zk0","created":1534643376274,"text":"panic!()导致当前的执行线程崩溃并返回指定的信息。"},"children":[]},{"data":{"id":"bnqpoackl2w0","created":1534643376275,"text":"不会返回,拥有一个类型!"},"children":[]}]},{"data":{"id":"bnqpoackt5s0","created":1534643376275,"text":"函数指针","expandState":"collapse"},"children":[{"data":{"id":"bnqpoackx3k0","created":1534643376275,"text":"fn plus_one(i: i32) -> i32 { i + 1 }"},"children":[]},{"data":{"id":"bnqpoackwrk0","created":1534643376275,"text":"let f: fn(i32) -> i32;"},"children":[]},{"data":{"id":"bnqpoackl9s0","created":1534643376275,"text":"let f: fn(i32) -> i32 = plus_one;"},"children":[]},{"data":{"id":"bnqpoacl8p40","created":1534643376276,"text":"let f = plus_one;"},"children":[]},{"data":{"id":"bnqpoaclg6w0","created":1534643376276,"text":"let s = f(5);"},"children":[]}]}]},{"data":{"id":"bnqpqqdr0zs0","created":1534643567903,"text":"方法","expandState":"collapse"},"children":[{"data":{"id":"bnqpqqds8q00","created":1534643567905,"text":"Rust 通过impl关键字提供了使用方法调用语法"},"children":[]},{"data":{"id":"bnqpqqdt2cg0","created":1534643567906,"text":"调用示例","expandState":"collapse"},"children":[{"data":{"id":"bnqpqqdtp2w0","created":1534643567907,"text":"struct Circle {\n\tx: f64,\n\ty: f64,\n\tradius: f64,\n}\n\nimpl Circle {\n\tfn area(&self) -> f64 {\n\t    std::f64::consts::PI * (self.radius * self.radius)\n\t}\n}\n\nfn main() {\n\tlet c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n\tprintln!(\"{}\", c.area());\n}"},"children":[]}]},{"data":{"id":"bnqpqqdtbew0","created":1534643567907,"text":"所有权示例","expandState":"collapse"},"children":[{"data":{"id":"bnqpqqdtua00","created":1534643567908,"text":"struct Circle {\n\tx: f64,\n\ty: f64,\n\tradius: f64,\n}\n\nimpl Circle {\n\tfn reference(&self) {\n\t   println!(\"taking self by reference!\");\n\t}\n\n\tfn mutable_reference(&mut self) {\n\t   println!(\"taking self by mutable reference!\");\n\t}\n\n\tfn takes_ownership(self) {\n\t   println!(\"taking ownership of self!\");\n\t}\n}"},"children":[]}]},{"data":{"id":"bnqpqqdtpag0","created":1534643567908,"text":"链式方法调用","expandState":"collapse"},"children":[{"data":{"id":"bnqpqqdu6qg0","created":1534643567908,"text":"令人尴尬的调用方法"},"children":[{"data":{"id":"bnqpqqduejc0","created":1534643567909,"text":"baz(bar(foo));"},"children":[]},{"data":{"id":"bnqpqqdvnfc0","created":1534643567911,"text":"foo.bar().baz();"},"children":[]}]},{"data":{"id":"bnqpqqdwayo0","created":1534643567912,"text":"fn main() {\n\tlet c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n\tprintln!(\"{}\", c.area());\n\n\tlet d = c.grow(2.0).area();\n\tprintln!(\"{}\", d);\n}"},"children":[]}]},{"data":{"id":"bnqpqqdxc5k0","created":1534643567914,"text":"关联函数","expandState":"collapse"},"children":[{"data":{"id":"bnqpqqdywbc0","created":1534643567916,"text":"静态函数是通过Struct::method()语法调用的，而不是ref.method()语法"},"children":[{"data":{"id":"bnqpqqdyhs00","created":1534643567916,"text":"struct Circle {\n\tx: f64,\n\ty: f64,\n\tradius: f64,\n}\n\nimpl Circle {\n\tfn new(x: f64, y: f64, radius: f64) -> Circle {\n\t    Circle {\n\t        x: x,\n\t        y: y,\n\t        radius: radius,\n\t    }\n\t}\n}\n\nfn main() {\n\tlet c = Circle::new(0.0, 0.0, 2.0);\n}"},"children":[]}]}]},{"data":{"id":"bnqpqqdygow0","created":1534643567916,"text":"构造器模式","expandState":"collapse"},"children":[{"data":{"id":"bnqpqqdylbc0","created":1534643567916,"text":"示例"},"children":[{"data":{"id":"bnqpqqdyu1c0","created":1534643567916,"text":"struct CircleBuilder {\n\tx: f64,\n\ty: f64,\n\tradius: f64,\n}\n\nimpl CircleBuilder {\n\tfn new() -> CircleBuilder {\n\t    CircleBuilder { x: 0.0, y: 0.0, radius: 1.0, }\n\t}\n\n\tfn x(&mut self, coordinate: f64) -> &mut CircleBuilder {\n\t    self.x = coordinate;\n\t    self\n\t}\n\n\tfn y(&mut self, coordinate: f64) -> &mut CircleBuilder {\n\t    self.y = coordinate;\n\t    self\n\t}\n\n\tfn radius(&mut self, radius: f64) -> &mut CircleBuilder {\n\t    self.radius = radius;\n\t    self\n\t}\n\n\tfn finalize(&self) -> Circle {\n\t    Circle { x: self.x, y: self.y, radius: self.radius }\n\t}\n}"},"children":[]},{"data":{"id":"bnqpqqdypaw0","created":1534643567916,"text":"fn main() {\n\tlet c = CircleBuilder::new()\n\t            .x(1.0)\n\t            .y(2.0)\n\t            .radius(2.0)\n\t            .finalize();\n\n\tprintln!(\"area: {}\", c.area());\n\tprintln!(\"x: {}\", c.x);\n\tprintln!(\"y: {}\", c.y);\n}"},"children":[]}]}]}]},{"data":{"id":"bnqqa0pb6sgg","created":1534645079289,"text":"Trait","expandState":"collapse"},"children":[{"data":{"id":"bnqqj6cz86go","created":1534645796881,"text":"特性","expandState":"collapse"},"children":[{"data":{"id":"bnqqi56ckuo8","created":1534645715940,"text":"告诉 Rust 编译器个类型必须提供哪些功能语言特性"},"children":[]},{"data":{"id":"bnqqjbexiuww","created":1534645807883,"text":"trait块与impl看起来很像，不过我们没有定义一个函数体，只是函数标记。"},"children":[]}]},{"data":{"id":"bnrk6pgny740","created":1534729453026,"text":"示例","expandState":"collapse","layout_right_offset":{"x":2,"y":-2}},"children":[{"data":{"id":"bnrk6tld8lk0","created":1534729462018,"text":"struct Circle {...}\n\ntrait HasArea {  fn area(&self) -> f64;  }\n\nimpl HasArea for Circle {\n\tfn area(&self) -> f64 {std::f64::consts::PI * (self.radius * self.radius)}\n}"},"children":[]}]},{"data":{"id":"bnrkjawxt600","created":1534730440093,"text":"泛型函数的 trait bound","expandState":"collapse","layout_right_offset":{"x":6,"y":0}},"children":[{"data":{"id":"bnrkmb3q7280","created":1534730675596,"text":"fn print_area<T>(shape: T) {println!(\"This shape has an area of {}\", shape.area());}\n//不能编译  error: no method named `area` found for type `T` in the current scope","layout_right_offset":{"x":0,"y":-12}},"children":[]},{"data":{"id":"bnrkn75qejc0","created":1534730745374,"text":"trait HasArea {\n\t fn area(&self) -> f64;\n }\nfn print_area<T: HasArea>(shape: T) {\n\tprintln!(\"This shape has an area of {}\", shape.area());\n}"},"children":[]}]},{"data":{"id":"bnrkqsg1cuw0","created":1534731026802,"text":"泛型结构体的 trait bound","expandState":"collapse"},"children":[{"data":{"id":"bnrqind0dyo0","created":1534747315481,"text":"impl<T: PartialEq> Rectangle<T> { ... }"},"children":[]}]},{"data":{"id":"bnrqjelbfcw0","created":1534747374757,"text":"实现 trait 的规则","expandState":"collapse"},"children":[{"data":{"id":"bnrr7gmlb7s0","created":1534749259927,"text":"特性","expandState":"expand"},"children":[{"data":{"id":"bnrr5lnhnkw0","created":1534749114137,"text":"如果 trait 并不定义在你的作用域，它并不能实现"},"children":[]},{"data":{"id":"bnrr7prcpt40","created":1534749279806,"text":"trait由你自己实现，定义于你编写impl相同的crate中"},"children":[]}]},{"data":{"id":"bnrr2hgcp8g0","created":1534748869906,"text":"例子","expandState":"collapse"},"children":[{"data":{"id":"bnrr3d0c6qg0","created":1534748938595,"text":"trait ApproxEqual {\nfn approx_equal(&self, other: &Self) -> bool;\n}\nimpl ApproxEqual for f32 {\nfn approx_equal(&self, other: &Self) -> bool {\n// Appropriate for `self` and `other` being close to 1.0.\n(self - other).abs() <= ::std::f32::EPSILON\n}\n}\n\nprintln!(\"{}\", 1.0.approx_equal(&1.00000001));"},"children":[]}]},{"data":{"id":"bnrr2stcl2w0","created":1534748894636,"text":"先use trait，才能使用","expandState":"collapse"},"children":[{"data":{"id":"bnrr3mormxk0","created":1534748959663,"text":"use std::io::Write;\n\nlet mut f = std::fs::File::create(\"foo.txt\").expect(\"Couldn’t create foo.txt\");\nlet buf = b\"whatever\";\nlet result = f.write(buf);\n# result.unwrap(); // Ignore the error."},"children":[]}]}]},{"data":{"id":"bnrr8scva6g0","created":1534749363825,"text":"多 trait bound","expandState":"collapse"},"children":[{"data":{"id":"bnrr8yg80wg0","created":1534749377088,"text":"多于1个限定，可以使用+"},"children":[]},{"data":{"id":"bnrr9ezyvb40","created":1534749413111,"text":"use std::fmt::Debug;\n\nfn foo<T: Clone + Debug>(x: T) {\n\tx.clone();\n\tprintln!(\"{:?}\", x);\n}"},"children":[]}]},{"data":{"id":"bnrrayu6le80","created":1534749534661,"text":"where 从句","expandState":"collapse"},"children":[{"data":{"id":"bnrrb0leyfs0","created":1534749538484,"text":"用于多个泛型类型的复杂定义，将限制加在参数列表后面的where子句中"},"children":[]},{"data":{"id":"bnrrc9z3tag0","created":1534749637267,"text":"fn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n\tx.clone();\n\ty.clone();\n\tprintln!(\"{:?}\", y);\n}"},"children":[]}]},{"data":{"id":"bnrrjsolro80","created":1534750226540,"text":"默认方法","expandState":"collapse"},"children":[{"data":{"id":"bnrrjswukx40","created":1534750227039,"text":"默认方法可以增加在 trait 定义中"},"children":[]},{"data":{"id":"bnrrl0108w80","created":1534750320892,"text":"可以在impl中重新实现它，以覆盖默认方法"},"children":[]},{"data":{"id":"bnrrk87oltk0","created":1534750260346,"text":"trait Foo {\n\tfn is_valid(&self) -> bool;\n\tfn is_invalid(&self) -> bool { !self.is_valid() }\n}\nstruct UseDefault;\n\nimpl Foo for UseDefault {\n\tfn is_valid(&self) -> bool {\n\t    println!(\"Called UseDefault.is_valid.\");\n\t    true\n\t}\n}"},"children":[]}]},{"data":{"id":"bnrrliktmcg0","created":1534750361272,"text":"继承","expandState":"collapse"},"children":[{"data":{"id":"bnrrobmslt40","created":1534750581246,"text":"trait Foo {\n\tfn foo(&self);\n}\n\ntrait FooBar : Foo {\n\tfn foobar(&self);\n}"},"children":[]}]},{"data":{"id":"bnrros5lgdk0","created":1534750617212,"text":"Deriving","expandState":"collapse"},"children":[{"data":{"id":"bnrrowjax940","created":1534750626748,"text":"重复的实现像Debug和Default这样的 trait 会变得很无趣。为此，Rust 提供了一个属性\n来允许我们让 Rust 为我们自动实现 trait"},"children":[]},{"data":{"id":"bnrrp4u414g0","created":1534750644815,"text":"#[derive(Debug)]\nstruct Foo;\nfn main() {\n\tprintln!(\"{:?}\", Foo);\n}"},"children":[]},{"data":{"id":"bnrrpnzo5ug0","created":1534750686510,"text":"deriving 限制为一些特定的 trait","expandState":"collapse"},"children":[{"data":{"id":"bnrrpu7y6m00","created":1534750700072,"text":"Clone\nCopy\nDebug\nDefault\nEq\nHash\nOrd\nPartialEq\nPartialOrd"},"children":[]}]}]}]},{"data":{"id":"bnrrrfolyow0","created":1534750825156,"text":"Trait::Drop","expandState":"collapse"},"children":[{"data":{"id":"bnrrrq6cgvc0","created":1534750847996,"text":"特性","expandState":"collapse"},"children":[{"data":{"id":"bnrrroagu800","created":1534750843892,"text":"由 Rust 标准库提供的特殊 trait"},"children":[]},{"data":{"id":"bnrrrw0uttc0","created":1534750860725,"text":"Drop trait 提供了一个当一个值离开作用域后运行一些代码的方法"},"children":[]},{"data":{"id":"bnrrtguffko0","created":1534750984413,"text":"值会以与它们声明相反的顺序被丢弃（dropped）"},"children":[]},{"data":{"id":"bnrrv8kc5eo0","created":1534751123117,"text":"通常来说，Drop用来清理任何与struct关联的资源。例如，Arc<T>类型\n是一个引用计数类型。当Drop被调用，\n它会减少引用计数，并且如果引用的总数为0，将会清除底层的值。"},"children":[]}]},{"data":{"id":"bnrrtpq3xyw0","created":1534751003742,"text":"显例","expandState":"collapse"},"children":[{"data":{"id":"bnrru7k31nc0","created":1534751042560,"text":"struct Firework {  strength: i32, }\n\nimpl Drop for Firework {\n\tfn drop(&mut self) {\n\t    println!(\"BOOM times {}!!!\", self.strength);}}\n\nfn main() {\n\tlet firecracker = Firework { strength: 1 };\n\tlet tnt = Firework { strength: 100 };\n}\n\n这会输出：\nBOOM times 100!!!\nBOOM times 1!!!"},"children":[]}]}]},{"data":{"id":"bnrsa0l149s0","created":1534752281207,"text":"trait对象","expandState":"collapse"},"children":[{"data":{"id":"bnrsdhi7lr40","created":1534752553134,"text":"静态分发","expandState":"collapse"},"children":[{"data":{"id":"bnrsdt7c26g0","created":1534752578598,"text":"示例","expandState":"collapse"},"children":[{"data":{"id":"bnrsftgqfls0","created":1534752735894,"text":"原始泛型代码","expandState":"collapse"},"children":[{"data":{"id":"bnrsduwck2o0","created":1534752582287,"text":"# trait Foo { fn method(&self) -> String; }\n# impl Foo for u8 { fn method(&self) -> String { format!(\"u8: {}\", *self) } }\n# impl Foo for String { fn method(&self) -> String { format!(\"string: {}\", *self) } }\nfn do_something<T: Foo>(x: T) {\n\tx.method();\n}\nfn main() {\n\tlet x = 5u8;\n\tlet y = \"Hello\".to_string();\n\n\tdo_something(x);\n\tdo_something(y);\n}"},"children":[]}]},{"data":{"id":"bnrsez5vrc80","created":1534752669935,"text":"生成以下代码","expandState":"expand"},"children":[{"data":{"id":"bnrsf94vorc0","created":1534752691642,"text":"...\nfn do_something_u8(x: u8) { x.method();}\nfn do_something_string(x: String) { x.method();}\n\nfn main() {\n\tlet x = 5u8;\n\tlet y = \"Hello\".to_string();\n\n\tdo_something_u8(x);\n\tdo_something_string(y);\n}"},"children":[]}]}]}]},{"data":{"id":"bnru3x0wi0g0","created":1534757445495,"text":"动态分发","expandState":"collapse"},"children":[{"data":{"id":"bnru4imahnc0","created":1534757492500,"text":"示例","expandState":"collapse"},"children":[{"data":{"id":"bnru4kbkac80","created":1534757496205,"text":"...\nfn do_something(x: &Foo) {\n\tx.method();\n}\nfn main() {\n\tlet x = 5u8;\n\tdo_something(&x as &Foo);\nlet y = \"Hello\".to_string();\n\tdo_something(&y);\n}"},"children":[]}]},{"data":{"id":"bnru5wbze2o0","created":1534757600716,"text":"一个使用trait对象的函数并没有为每个实现了Foo的类型专门生成函数"},"children":[]},{"data":{"id":"bnru64ljwfc0","created":1534757618708,"text":"只有一份函数的代码，一般会减少代码膨胀。"},"children":[]},{"data":{"id":"bnru64fqbs80","created":1534757618356,"text":"因为调用虚函数，会带来更大的运行时开销，也会大大地阻止任何内联以及相关优化的进行"},"children":[]}]},{"data":{"id":"bnru6qmfumg0","created":1534757666651,"text":"为什么用指针？","expandState":"collapse"},"children":[{"data":{"id":"bnru8wrk1b40","created":1534757836750,"text":"如果值没有使用指针存储，我们无法保证代码能对其他类型正常运作，因为其它类型可以是任意大小的。"},"children":[]},{"data":{"id":"bnru95ox6lk0","created":1534757856181,"text":"用指针来储存值意味着当我们使用 trait 对象时值的大小（size）是无关的，只与指针的大小（size）有关。"},"children":[]}]},{"data":{"id":"bnru9ee2fr40","created":1534757875116,"text":"表现","expandState":"collapse"},"children":[{"data":{"id":"bnru9lwr7hc0","created":1534757891484,"text":"可以在一个 trait 对象上通过一个特殊的函数指针的记录调用的特性函数通常叫做“虚函数表”"},"children":[]}]},{"data":{"id":"bnrx47v1hlk0","created":1534765932414,"text":"对象安全"},"children":[]}]},{"data":{"id":"bnrx6nr14ds0","created":1534766123728,"text":"闭包","expandState":"collapse"},"children":[{"data":{"id":"bnrx88tbdco0","created":1534766247943,"text":"语法","expandState":"collapse"},"children":[{"data":{"id":"bnrx8cqh26w0","created":1534766256478,"text":"let plus_one = |x: i32| x + 1;\nassert_eq!(2, plus_one(1));"},"children":[]},{"data":{"id":"bnrx8ylsso80","created":1534766304085,"text":"let plus_two = |x| {\n\tlet mut result: i32 = x;\n\tresult += 1;\n\tresult += 1;\n\tresult\n};"},"children":[]}]},{"data":{"id":"bnrxa1y7fnk0","created":1534766389730,"text":"对比","expandState":"collapse"},"children":[{"data":{"id":"bnrxa6fvvp40","created":1534766399506,"text":"fn  plus_one_v1   (x: i32) -> i32 { x + 1 }\nlet plus_one_v2 = |x: i32| -> i32 { x + 1 };\nlet plus_one_v3 = |x: i32|          x + 1  ;"},"children":[]}]},{"data":{"id":"bnrxagd8jkg0","created":1534766421113,"text":"闭包及环境","expandState":"collapse"},"children":[{"data":{"id":"bnserh47z4o0","created":1534815713804,"text":"可变引用在闭包中被借用","expandState":"expand"},"children":[{"data":{"id":"bnserpvccfc0","created":1534815732858,"text":"let mut num = 5;\nlet plus_num = |x: i32| x + num;\nlet y = &mut num;","layout_right_offset":{"x":23,"y":-41}},"children":[]},{"data":{"id":"bnses6y8fw00","created":1534815770039,"text":"num的可变借用因为闭包已经借用了，以上用法会报错","layout_right_offset":{"x":18,"y":-27}},"children":[]},{"data":{"id":"bnsesger8js0","created":1534815790629,"text":"let mut num = 5;\n{\n\tlet plus_num = |x: i32| x + num;\n} // `plus_num` goes out of scope; borrow of `num` ends.let y = &mut num;","layout_right_offset":{"x":24,"y":-9}},"children":[]}]}]},{"data":{"id":"bnseuc7h9c00","created":1534815938210,"text":"move闭包","expandState":"collapse"},"children":[{"data":{"id":"bnsewjfd4rk0","created":1534816110652,"text":"使用move关键字强制闭包取得变量所在环境的所有权"},"children":[]},{"data":{"id":"bnsf1buck6g0","created":1534816485965,"text":"copy例子","expandState":"collapse"},"children":[{"data":{"id":"bnsf2j57yco0","created":1534816580224,"text":"需要将add_num声明为mut，因为我们会改变它的环境"},"children":[]},{"data":{"id":"bnsf1eyoib40","created":1534816492757,"text":"let mut num = 5;\n{\n\tlet mut add_num = |x: i32| num += x;\n\tadd_num(5);\n}\nassert_eq!(10, num);"},"children":[]}]},{"data":{"id":"bnsf2vludig0","created":1534816607351,"text":"move例子","expandState":"collapse"},"children":[{"data":{"id":"bnsf4i6icls0","created":1534816734854,"text":"let mut num = 5;\n{\n\tlet mut add_num = move |x: i32| num += x;\n\tadd_num(5);\n}\nassert_eq!(5, num);"},"children":[]},{"data":{"id":"bnsf540geb40","created":1534816782377,"text":"只会得到5。与其获取一个我们num的可变借用，我们取得了一个拷贝的所有权。"},"children":[]}]},{"data":{"id":"bnsf5q2d6kg0","created":1534816830381,"text":"闭包实现","expandState":"collapse"},"children":[{"data":{"id":"bnsf78p0ubs0","created":1534816949298,"text":"Rust 的闭包实现实际上是trait的语法糖"},"children":[]},{"data":{"id":"bnsf98olt000","created":1534817106001,"text":"在Rust中，我们使用trait系统来重载运算符，调用函数也不例外。"},"children":[]},{"data":{"id":"bnsf9kq14xc0","created":1534817132208,"text":"我们有三个 trait 来分别重载","expandState":"collapse"},"children":[{"data":{"id":"bnsfarrhiow0","created":1534817225898,"text":"Fn"},"children":[{"data":{"id":"bnsfbjldb1c0","created":1534817286478,"text":"Fn获取&self"},"children":[]}]},{"data":{"id":"bnsfaunefdc0","created":1534817232181,"text":"FnMut"},"children":[{"data":{"id":"bnsfbo3w4ps0","created":1534817296305,"text":"FnMut获取&mut self"},"children":[]}]},{"data":{"id":"bnsfawtqtk00","created":1534817236918,"text":"FnOnce"},"children":[{"data":{"id":"bnsfbt0973k0","created":1534817306969,"text":"FnOnce获取self"},"children":[]}]}]},{"data":{"id":"bnsfd92bhew0","created":1534817420287,"text":"闭包的|| {}语法是上面 3 个 trait 的语法糖。Rust 将会为环境创建一个结构体，impl合适的 trait，并使用它。"},"children":[]}]},{"data":{"id":"bnsfe1eu2o00","created":1534817481993,"text":"闭包作为参数","expandState":"collapse"},"children":[{"data":{"id":"bnsgl9cd0m80","created":1534820868917,"text":"fn call_with_one<F>(some_closure: F) -> i32 \n where F: Fn(i32) -> i32 {  some_closure(1)   }"},"children":[]}]},{"data":{"id":"bnsglzo1whs0","created":1534820926220,"text":"函数指针和闭包","expandState":"collapse"},"children":[{"data":{"id":"bnsgmu3v4h40","created":1534820992480,"text":"fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {\n\tsome_closure(1)\n}\nfn add_one(i: i32) -> i32 {\n\ti + 1\n}\nlet f = add_one;\nlet answer = call_with_one(&f);\nassert_eq!(2, answer);"},"children":[]}]},{"data":{"id":"bnsgn3upwrk0","created":1534821013695,"text":"返回闭包","expandState":"expand"},"children":[{"data":{"id":"bnsknohln800","created":1534832343054,"text":"须以 & 'static 返回","expandState":"collapse"},"children":[{"data":{"id":"bnskpcdd2vc0","created":1534832473404,"text":"fn factory() -> Box<Fn(i32) -> i32> {\n\tlet num = 5;\n\tBox::new(move |x| x + num)\n}\nlet f = factory();\nlet answer = f(1);\nassert_eq!(6, answer);"},"children":[]}]}]}]}]},{"data":{"id":"bnsku0mjnkw0","created":1534832839659,"text":"通用函数调用语法","expandState":"collapse"},"children":[{"data":{"id":"bnskx3gira80","created":1534833080917,"text":"区分我们需要调用哪一函数的方法","expandState":"collapse"},"children":[{"data":{"id":"bnskxdlxf9s0","created":1534833103012,"text":"Foo::f(&b);\nBar::f(&b)"},"children":[]}]},{"data":{"id":"bnsl0neir6o0","created":1534833359425,"text":"<Type as Trait>::method(args);","expandState":"collapse"},"children":[{"data":{"id":"bnsky8v8o140","created":1534833171056,"text":"<>::语法是一个提供类型提示的方法。类型位于<>中"},"children":[]},{"data":{"id":"bnskzo2rkxc0","created":1534833282527,"text":"类型是Type as Trait,在没有二义时as Trait部分是可选的。尖括号也是一样。"},"children":[]},{"data":{"id":"bnsl12mxzuo0","created":1534833392586,"text":"trait Foo {\n\tfn foo() -> i32;\n}\nstruct Bar;\nimpl Bar {\n\tfn foo() -> i32 {\n\t    20\n\t}\n}\nimpl Foo for Bar {\n\tfn foo() -> i32 {\n\t    10\n\t}\n}\nfn main() {\n\tassert_eq!(10, <Bar as Foo>::foo());\n\tassert_eq!(20, Bar::foo());\n}"},"children":[]}]}]},{"data":{"id":"bnsl1ywqbls0","created":1534833462835,"text":"crate和模块","expandState":"collapse"},"children":[{"data":{"id":"bnsl3skwuag0","created":1534833605788,"text":"基础术语","expandState":"collapse"},"children":[{"data":{"id":"bnsl3ya9aig0","created":1534833618204,"text":"包装箱","expandState":"collapse"},"children":[{"data":{"id":"bnsl43ageg00","created":1534833629100,"text":"包装箱是其它语言中库（library）或包（package）的同义词"},"children":[]},{"data":{"id":"bnsl4cposy80","created":1534833649612,"text":"“Cargo”则是 Rust 包管理工具的名字：你通过 Cargo 把你的包装箱交付给别人。"},"children":[]},{"data":{"id":"bnsl4jk5nv40","created":1534833664515,"text":"包装箱可以根据项目的不同，生成可执行文件或库文件。"},"children":[]}]},{"data":{"id":"bnsl55i2kqg0","created":1534833712278,"text":"模块","expandState":"collapse"},"children":[{"data":{"id":"bnsl5dzrdr40","created":1534833730762,"text":"每个包装箱有一个隐含的根模块（root module）包含了该包装箱的代码"},"children":[]},{"data":{"id":"bnsl5nu6wyo0","created":1534833752193,"text":"可以在根模块下定义一个子模块树。"},"children":[]},{"data":{"id":"bnsl5rmle740","created":1534833760441,"text":"模块让你可以在包装箱内部为代码分区。"},"children":[]}]}]},{"data":{"id":"bnsl6k2k18g0","created":1534833822356,"text":"创建crate","expandState":"collapse"},"children":[{"data":{"id":"bnsl6sqs34w0","created":1534833841235,"text":"$ cargo new phrases","expandState":"collapse"},"children":[{"data":{"id":"bnsl6zdcsg80","created":1534833855661,"text":"会生成一个简单的crate,模块根是phrases"},"children":[]},{"data":{"id":"bnsl7alfuz40","created":1534833880095,"text":"src/lib.rs是我们包装箱的根","expandState":"expand"},"children":[]}]}]},{"data":{"id":"bnsl9bbgqqg0","created":1534834038396,"text":"定义模块","expandState":"collapse"},"children":[{"data":{"id":"bnslazt3hbk0","created":1534834170069,"text":"src/lib.rs示例","expandState":"expand"},"children":[{"data":{"id":"bnsl8gq3pyo0","created":1534833971801,"text":"mod english {\n\tmod greetings {}\n\tmod farewells {}\n}\nmod japanese {\n\tmod greetings {}\n\tmod farewells {}\n}"},"children":[]}]},{"data":{"id":"bnsl9gw7zs00","created":1534834050535,"text":"mod关键字之后跟模块名称"},"children":[]},{"data":{"id":"bnsl9t3lxyw0","created":1534834077103,"text":"模块的命名采用Rust其它标识符的命名惯例 lower_snake_case"},"children":[]},{"data":{"id":"bnsla5rbtko0","created":1534834104659,"text":"在大括号中（{}）是模块的内容"},"children":[]},{"data":{"id":"bnslao4b81s0","created":1534834144626,"text":"我们可以用双冒号（::）标记访问子模块"},"children":[{"data":{"id":"bnslb7z2obs0","created":1534834187845,"text":"english::greetings，english::farewells ..."},"children":[]}]},{"data":{"id":"bnslc8zlctk0","created":1534834268417,"text":"因为这个包装箱的根文件叫做lib.rs，且没有一个main()函数。Cargo会把这个包装箱构建为一个库"},"children":[]}]},{"data":{"id":"bnslcgch1i80","created":1534834284433,"text":"构建","expandState":"collapse"},"children":[{"data":{"id":"bnslcj1cofc0","created":1534834290291,"text":"cargo build"},"children":[]},{"data":{"id":"bnslcm814680","created":1534834297225,"text":"ls target/debug","expandState":"collapse"},"children":[{"data":{"id":"bnslcwakduw0","created":1534834319147,"text":"build  deps  examples  libphrases-a7448e02a0468eaa.rlib  native"},"children":[]},{"data":{"id":"bnsld0ectbs0","created":1534834328083,"text":"libphrases-<hash>.rlib是构建好的包装箱"},"children":[]}]}]},{"data":{"id":"bnsleokphrk0","created":1534834459074,"text":"多文件包装箱","expandState":"collapse"},"children":[{"data":{"id":"bnslf4e0elc0","created":1534834493497,"text":"将代码拆分细化，方便维护管理","expandState":"expand"},"children":[]},{"data":{"id":"bnslflilqps0","created":1534834530780,"text":"src/lib.rs","expandState":"collapse"},"children":[{"data":{"id":"bnslfoiofgg0","created":1534834537315,"text":"mod english;\nmod japanese;"},"children":[]},{"data":{"id":"bnslg19seq80","created":1534834565076,"text":"这两个定义告诉 Rust 去寻找\nsrc/english.rs或src/english/mod.rs\nsrc/japanese.rs或src/japanese/mod.rs"},"children":[]}]},{"data":{"id":"bnslgvv3yns0","created":1534834631669,"text":"rc/english/mod.rs\nsrc/japanese/mod.rs\n中像这样定义","expandState":"collapse"},"children":[{"data":{"id":"bnslherme5k0","created":1534834672817,"text":"mod greetings;\nmod farewells;"},"children":[]},{"data":{"id":"bnsli16w0rc0","created":1534834721629,"text":"再一次，这些定义告诉 Rust 去寻找\nsrc/english/greetings.rs或src/english/greetings/mod.rs\nsrc/english/farewells.rs或src/english/farewells/mod.rs\nsrc/japanese/greetings.rs或src/japanese/greetings/mod.rs\nsrc/japanese/farewells.rs或src/japanese/farewells/mod.rs"},"children":[]}]},{"data":{"id":"bnsljhxi0yw0","created":1534834836431,"text":"目录结构示例","expandState":"collapse"},"children":[{"data":{"id":"bnsljrxou7c0","created":1534834858210,"text":"$ tree .\n.\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── english\n│   │   ├── farewells.rs\n│   │   ├── greetings.rs\n│   │   └── mod.rs\n│   ├── japanese\n│   │   ├── farewells.rs\n│   │   ├── greetings.rs\n│   │   └── mod.rs\n│   └── lib.rs\n└── target"},"children":[]}]}]},{"data":{"id":"bnslkyou8g80","created":1534834951277,"text":"导入外部的包装箱","expandState":"collapse"},"children":[{"data":{"id":"bnslloykqlc0","created":1534835008462,"text":"创建src/main.rs文件","expandState":"collapse"},"children":[{"data":{"id":"bnsllsn6btc0","created":1534835016479,"text":"extern crate phrases;\n\nfn main() {\n\tprintln!(\"Hello in English: {}\", phrases::english::greetings::hello());\n\tprintln!(\"Goodbye in English: {}\", phrases::english::farewells::goodbye());\n\n\tprintln!(\"Hello in Japanese: {}\", phrases::japanese::greetings::hello());\n\tprintln!(\"Goodbye in Japanese: {}\", phrases::japanese::farewells::goodbye());\n}","layout_right_offset":{"x":35,"y":0}},"children":[]}]},{"data":{"id":"bnslmbcs3e80","created":1534835057210,"text":"严格控制接口公有及私有","expandState":"expand"},"children":[{"data":{"id":"bnslmzqa42o0","created":1534835110269,"text":"pub mod greetings;\npub mod farewells;"},"children":[]},{"data":{"id":"bnsln5cyq6w0","created":1534835122524,"text":"pub fn hello() -> String {\n\t\"Hello!\".to_string()\n}"},"children":[]}]}]},{"data":{"id":"bnslnntq8c80","created":1534835162720,"text":"用use导入模块","expandState":"collapse"},"children":[{"data":{"id":"bnsm3h95bxs0","created":1534836402242,"text":"use phrases::english::greetings::hello;\nuse phrases::english::farewells::goodbye;\n//或只获取父级\nuse phrases::english::greetings;\n//简写\nuse phrases::english::{greetings, farewells};"},"children":[]}]},{"data":{"id":"bnsm57agyfc0","created":1534836537282,"text":"使用pub use重导出","expandState":"collapse"},"children":[{"data":{"id":"bnsm5saxm480","created":1534836583022,"text":"示例","expandState":"collapse"},"children":[{"data":{"id":"bnsm5v7g4ts0","created":1534836589342,"text":"extern crate phrases;\nuse phrases::english::{greetings,farewells};\nuse phrases::japanese;\nfn main() {\n\tprintln!(\"Hello in English: {}\", greetings::hello());\n\tprintln!(\"Goodbye in English: {}\", farewells::goodbye());\n\tprintln!(\"Hello in Japanese: {}\", japanese::hello());\n\tprintln!(\"Goodbye in Japanese: {}\", japanese::goodbye());\n}"},"children":[]}]},{"data":{"id":"bnsm68z270o0","created":1534836619310,"text":"修改src/japanese/mod.rs","expandState":"collapse"},"children":[{"data":{"id":"bnsm6eik31c0","created":1534836631373,"text":"pub use self::greetings::hello;\npub use self::farewells::goodbye;\nmod greetings;\nmod farewells;"},"children":[]},{"data":{"id":"bnsm7b5zroo0","created":1534836702447,"text":"可以使用通配符来导入greetings的一切到当前空间中"},"children":[]},{"data":{"id":"bnsm7ebsyn40","created":1534836709328,"text":"pub use self::greetings::*"},"children":[]}]},{"data":{"id":"bnsm7wytv7s0","created":1534836749903,"text":"use self/super..."},"children":[]}]},{"data":{"id":"bnsm9v02b6o0","created":1534836902352,"text":"as解决引入冲突","expandState":"collapse"},"children":[{"data":{"id":"bnsmch7m8z40","created":1534837107426,"text":"extern crate phrases as sayings;\n\nuse sayings::japanese::greetings as ja_greetings;\nuse sayings::japanese::farewells::*;\nuse sayings::english::{self, greetings as en_greetings, farewells as en_farewells};\n\nfn main() {\n\tprintln!(\"Hello in English; {}\", en_greetings::hello());\n\tprintln!(\"And in Japanese: {}\", ja_greetings::hello());\n\tprintln!(\"Goodbye in English: {}\", english::farewells::goodbye());\n\tprintln!(\"Again: {}\", en_farewells::goodbye());\n\tprintln!(\"And in Japanese: {}\", goodbye());\n}"},"children":[]}]}]},{"data":{"id":"bnudmtwty540","created":1535015648638,"text":"运算符重载","expandState":"collapse"},"children":[{"data":{"id":"bnudn2s8r3s0","created":1535015667952,"text":"+运算符示例","expandState":"collapse"},"children":[{"data":{"id":"bnudnljfe880","created":1535015708778,"text":"use std::ops::Add;\n\n#[derive(Debug)]struct Point {\n\tx: i32,\n\ty: i32,\n}\n\nimpl Add for Point {\n\ttype Output = Point;\n\n\tfn add(self, other: Point) -> Point {\n\t    Point { x: self.x + other.x, y: self.y + other.y }\n\t}\n}\n\nfn main() {\n\tlet p1 = Point { x: 1, y: 0 };\n\tlet p2 = Point { x: 2, y: 3 };\n\n\tlet p3 = p1 + p2;\n\n\tprintln!(\"{:?}\", p3);\n}"},"children":[]}]},{"data":{"id":"bnuxrjgf4hc0","created":1535072439897,"text":"在泛型结构体中使用运算符 trait","expandState":"collapse"},"children":[{"data":{"id":"bnuxt4y9x200","created":1535072565053,"text":"mpl<T> HasArea<T> for Square<T>\n\t    where T: Mul<Output=T> + Copy { ... }"},"children":[]}]}]},{"data":{"id":"bnudl6wwj200","created":1535015520212,"text":"Deref强制多态","expandState":"collapse"},"children":[{"data":{"id":"bnuxunrsh340","created":1535072684384,"text":"规则","expandState":"collapse"},"children":[{"data":{"id":"bnudm0omfkg0","created":1535015585015,"text":"重载解引用运算符*"},"children":[]},{"data":{"id":"bnuxv1fixls0","created":1535072714118,"text":"如果你有一个U类型，和它的实现Deref<Target=T>，（那么）&U的值将会自动转换为&T"},"children":[]}]},{"data":{"id":"bnuxw39dvu80","created":1535072796464,"text":"示例","expandState":"collapse"},"children":[{"data":{"id":"bnuxw6envns0","created":1535072803313,"text":"use std::ops::Deref;\n\nstruct DerefExample<T> {\n\tvalue: T,\n}\n\nimpl<T> Deref for DerefExample<T> {\n\ttype Target = T;\n\n\tfn deref(&self) -> &T {\n\t    &self.value\n\t}\n}\n\nfn main() {\n\tlet x = DerefExample { value: 'a' };\n\tassert_eq!('a', *x);\n}"},"children":[]}]},{"data":{"id":"bnuy9uenzq80","created":1535073874291,"text":"Deref和方法调用","expandState":"collapse"},"children":[{"data":{"id":"bnuy9zmebwg0","created":1535073885642,"text":"示例"},"children":[{"data":{"id":"bnuya2u7v3s0","created":1535073892645,"text":"struct Foo;\n\nimpl Foo {\n\tfn foo(&self) { println!(\"Foo\"); }\n}\n\nlet f = &&Foo;\n\nf.foo();"},"children":[]}]},{"data":{"id":"bnuyanlrhig0","created":1535073937847,"text":"即便f是&&Foo，而foo接受&self，这也是可以工作的。"},"children":[{"data":{"id":"bnuyaxt5wc00","created":1535073960062,"text":"f.foo();\n(&f).foo();\n(&&f).foo();\n(&&&&&&&&f).foo();"},"children":[]}]},{"data":{"id":"bnuyb6hel7c0","created":1535073978942,"text":"一个&&&&&&&&&&&&&&&&Foo类型的值仍然可以调用Foo定义的方法，因为编译器会插入足够多的*来使类型正确。\n而正因为它插入*，它用了Deref。"},"children":[]}]}]}]},"template":"right","theme":"classic-compact","version":"1.4.43"}